{"version":3,"sources":["util/Spotify.js","Components/Searchbar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","e","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","jsonRespons","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAEIA,E,gGCiCWC,E,kDA9BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,KAAM,IAGV,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBART,E,0CAWnB,WACIE,KAAKN,MAAMO,SAASD,KAAKL,MAAMC,Q,8BAGnC,SAAiBM,GACbF,KAAKG,SAAS,CAACP,KAAMM,EAAME,OAAOC,U,oBAGtC,WACI,OACI,sBAAKC,UAAU,YAAf,UACI,uBAAOC,SAAUP,KAAKD,iBAAkBS,YAAa,mCACrD,wBAAQC,QAAWT,KAAKH,OAAQS,UAAU,eAA1C,2B,GAxBQI,IAAMC,WCoCfC,G,oEApCX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBAHJ,E,gDAMnB,WACI,OAAGE,KAAKN,MAAMqB,UACH,wBAAQT,UAAU,eAAeG,QAAST,KAAKc,YAA/C,eAEA,wBAAQR,UAAU,eAAeG,QAAST,KAAKa,SAA/C,iB,sBAIf,WACIb,KAAKN,MAAMsB,MAAMhB,KAAKN,MAAMuB,S,yBAGhC,WACIjB,KAAKN,MAAMwB,SAASlB,KAAKN,MAAMuB,S,oBAGnC,WACI,OACI,sBAAKX,UAAU,QAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,6BAAKN,KAAKN,MAAMuB,MAAME,OACtB,8BAAInB,KAAKN,MAAMuB,MAAMG,OAArB,MAAgCpB,KAAKN,MAAMuB,MAAMI,YAEpDrB,KAAKsB,sB,GA9BFZ,IAAMC,YCCpBY,E,4JACF,WAAS,IAAD,OACJ,OACI,qBAAKjB,UAAU,YAAf,SAEQN,KAAKN,MAAM8B,OAAOC,KAAI,SAAAR,GAClB,OAAO,cAAC,EAAD,CAAOA,MAAOA,EAEPD,MAAO,EAAKtB,MAAMsB,MAClBE,SAAU,EAAKxB,MAAMwB,SACrBH,UAAW,EAAKrB,MAAMqB,WAHjBE,EAAMS,a,GAPzBhB,IAAMC,WAoBfY,ICpBTI,E,4JACF,WACI,OACI,sBAAKrB,UAAU,gBAAf,UACI,yCACA,cAAC,EAAD,CAAWkB,OAAQxB,KAAKN,MAAMkC,cACnBZ,MAAOhB,KAAKN,MAAMsB,MAClBD,WAAW,W,GAPVL,IAAMC,WAanBgB,ICUAE,G,MAvBf,kDACI,WAAYnC,GAAO,IAAD,8BACd,cAAMA,IACDoC,iBAAmB,EAAKA,iBAAiBhC,KAAtB,gBAFV,EADtB,oDAMI,SAAiBiC,GACb/B,KAAKN,MAAMsC,aAAaD,EAAE3B,OAAOC,SAPzC,oBAUI,WACI,OACI,sBAAKC,UAAU,WAAf,UACI,uBAAO2B,aAAc,eAAgB1B,SAAUP,KAAK8B,mBACpD,cAAC,EAAD,CAAWN,OAAQxB,KAAKN,MAAMwC,eAClBhB,SAAUlB,KAAKN,MAAMwB,SACrBH,WAAW,IACvB,wBAAQT,UAAU,gBAAgBG,QAAST,KAAKN,MAAMyC,OAAtD,oCAjBhB,GAA8BzB,IAAMC,YLA9ByB,EAAU,CACZC,eADY,WAER,GAAG7C,EACC,OAAOA,EAIX,IAAM8C,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAElD,GAAIJ,GAAoBK,EAAgB,CACpCnD,EAAc8C,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAIxC,OAFAJ,OAAOO,YAAW,kBAAMtD,EAAc,KAAc,IAAVoD,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCxD,EAEP,IAAMyD,EAAS,2DAtBV,mCAsBU,0EArBP,2CAsBRV,OAAOC,SAAWS,GAI1BpD,OAvBY,SAuBLD,GACH,IAAMJ,EAAc4C,EAAQC,iBAC5B,OAAOa,MAAM,kDAAD,OAAmDtD,GAC/D,CACIuD,QAAS,CACTC,cAAc,UAAD,OAAY5D,MAE1B6D,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,OAAIA,EAAahC,OAGVgC,EAAahC,OAAOiC,MAAMhC,KAAI,SAAAR,GAAK,MAAK,CAC3CS,GAAIT,EAAMS,GACVP,KAAMF,EAAME,KACZC,OAAQH,EAAMyC,QAAQ,GAAGvC,KACzBE,MAAOJ,EAAMI,MAAMF,KACnBwC,IAAK1C,EAAM0C,QAPJ,OAYnBC,aA9CY,SA8CCzC,EAAM0C,GACf,GAAI1C,GAAS0C,EAAUC,OAAvB,CAIA,IAIIC,EAJEvE,EAAc4C,EAAQC,iBACtBc,EAAU,CACZC,cAAc,UAAD,OAAY5D,IAI7B,OAAO0D,MAAM,gCAAiC,CAACC,QAASA,IACtDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEH,OADAO,EAASP,EAAa9B,GACfwB,MAAM,oCAAD,OAAqCa,EAArC,cACZ,CACIZ,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEhD,KAAMA,MAC9BkC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAe,GACH,IAAMC,EAAab,EAAa9B,GAChC,OAAOwB,MAAM,oCAAD,OAAqCa,EAArC,sBAAyDM,EAAzD,WACZ,CACIlB,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEG,KAAMT,eAWlCzB,IMDAmC,E,kDA/Eb,WAAY7E,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXiC,cAAe,GACf4C,aAAc,cACdtC,eAAgB,IAElB,EAAKrB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBACnB,EAAK2E,mBAAqB,EAAKA,mBAAmB3E,KAAxB,gBAC1B,EAAK8D,aAAe,EAAKA,aAAa9D,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAZG,E,4CAenB,SAASmB,GACP,IAAIO,EAASxB,KAAKL,MAAMuC,eACrBV,EAAOkD,MAAK,SAAAC,GAAU,OAAIA,EAAWjD,KAAOT,EAAMS,QAGrDF,EAAOoD,KAAK3D,GACZjB,KAAKG,SAAS,CACZ+B,eAAgBV,O,yBAIpB,SAAYP,GACV,IAAIO,EAASxB,KAAKL,MAAMuC,eACxBV,EAASA,EAAOqD,QAAO,SAAAF,GAAU,OAAIA,EAAWjD,KAAOT,EAAMS,MAC7D1B,KAAKG,SAAS,CACZ+B,eAAgBV,M,gCAIpB,SAAmBL,GACjBnB,KAAKG,SAAS,CACZqE,aAAcrD,M,0BAIlB,WAAe,IAAD,OACN0C,EAAY7D,KAAKL,MAAMuC,eAAeT,KAAI,SAAAR,GAAK,OAAIA,EAAM0C,OAC/DvB,EAAQwB,aAAa5D,KAAKL,MAAM6E,aAAcX,GAAWR,MAAK,WAC5D,EAAKlD,SAAS,CACZqE,aAAc,eACdtC,eAAgB,U,oBAKtB,SAAOtC,GAAO,IAAD,OACXwC,EAAQvC,OAAOD,GAAMyD,MAAK,SAAAzB,GACxB,EAAKzB,SAAS,CAACyB,cAAeA,S,oBAIlC,WACE,OACE,gCACA,oCAAM,sBAAMtB,UAAU,YAAhB,iBAAN,SACA,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAWL,SAAUD,KAAKH,SAC1B,sBAAKS,UAAU,eAAf,UACE,cAAC,EAAD,CAAesB,cAAe5B,KAAKL,MAAMiC,cACvCZ,MAAOhB,KAAKa,WACd,cAAC,EAAD,CAAU2D,aAAcxE,KAAKL,MAAM6E,aACjCtC,eAAgBlC,KAAKL,MAAMuC,eAC3BhB,SAAUlB,KAAKc,YACfkB,aAAchC,KAAKyE,mBACnBtC,OAAQnC,KAAK4D,4B,GAtEPlD,IAAMC,WCKTmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ec17d983.chunk.js","sourcesContent":["const clientId = '79993c6537264355976269971fd68d47';\r\nconst redirectUri = \"https://capricious-calculator.surge.sh/\";\r\nlet accessToken; \r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        //Checks for Token Match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            //Clears the paremeters to grab new token\r\n            window.setTimeout(() => accessToken = '', expiresIn*1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \r\n        { \r\n            headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if(!jsonResponse.tracks){\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n\r\n    savePlaylist(name, trackUris){\r\n        if(!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {\r\n            Authorization: `Bearer ${accessToken}`\r\n        };\r\n        let userId;\r\n        \r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            }).then(response => response.json()\r\n            ).then(jsonRespons => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ uris: trackUris})\r\n                })\r\n            })\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        };\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({term: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder =\"Enter a Song, Album, or Artist\" />\r\n                <button onClick = {this.search} className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n    \r\n    renderAction() {\r\n        if(this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track}\r\n                                      key={track.id}\r\n                                      onAdd={this.props.onAdd}\r\n                                      onRemove={this.props.onRemove}\r\n                                      isRemoval={this.props.isRemoval}\r\n                                      />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults}\r\n                           onAdd={this.props.onAdd}\r\n                           isRemoval={false}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nexport class Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.props.onNameChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n                <TrackList tracks={this.props.playlistTracks}\r\n                            onRemove={this.props.onRemove}\r\n                            isRemoval={true}/>\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../Searchbar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: [] \n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }\n    tracks.push(track);\n    this.setState({\n      playlistTracks: tracks\n    })\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(savedTrack => savedTrack.id !== track.id);\n    this.setState({\n      playlistTracks: tracks\n    })\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    })\n  }\n\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist', \n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  render() {\n    return (\n      <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={this.state.searchResults}\n            onAdd={this.addTrack}/>\n          <Playlist playlistName={this.state.playlistName} \n            playlistTracks={this.state.playlistTracks} \n            onRemove={this.removeTrack}\n            onNameChange={this.updatePlaylistName}\n            onSave={this.savePlaylist}\n            />\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{/* <div className=\"App\">\n<header className=\"App-header\">\n  <p>\n    Edit <code>src/App.js</code> and save to reload.\n  </p>\n  <a\n    className=\"App-link\"\n    href=\"https://reactjs.org\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    Learn React\n  </a>\n</header>\n</div> */}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}